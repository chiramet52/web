
import cv2
import time
import torch
from ultralytics import YOLO
import logging
import os

# üîá ‡∏õ‡∏¥‡∏î log ‡∏Ç‡∏≠‡∏á YOLO
os.environ["ULTRALYTICS_LOGGING"] = "False"
logging.getLogger("ultralytics").setLevel(logging.WARNING)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß
model = YOLO('detectModel.pt')
model.to(torch.device('cpu'))



# ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap = cv2.VideoCapture(0)

print("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")

while True:
    if ser.in_waiting:
        line = ser.readline().decode().strip()
        print(f"[‡∏à‡∏≤‡∏Å Arduino] {line}")
        
        if line == "DETECTED":
            print("üîç ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢ AI")

            ret, frame = cap.read()
            if not ret:
                print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á")
                continue

            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ YOLO
            results = model(frame)[0]

            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™
            classes = results.boxes.cls.tolist()
            labels = [model.names[int(cls)] for cls in classes]

            print(f"‡∏ú‡∏• AI: {labels}")

            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ plastic bottle
            if "bottle-plastic" in labels:
                print("‚úÖ ‡πÄ‡∏à‡∏≠‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Arduino")
                ser.write(b'BOTTLE\n')
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å")

    # ‡∏Å‡∏î Q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï
cap.release()
ser.close()
